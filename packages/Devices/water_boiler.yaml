switcher_kis:
  phone_id: !secret switcher_phone_id
  device_id: !secret switcher_device_id
  device_password: !secret switcher_device_password

input_datetime:
  water_boiler_last_on:
    has_date: true
    has_time: true
  water_boiler_last_off:
    has_date: true
    has_time: true

automation:
  - id: Water Boiler - Save On Off Time
    alias: Water Boiler - Save On Off Time
    trigger:
      - platform: state
        entity_id: switch.water_boiler
        from: "on"
        to: "off"
      - platform: state
        entity_id: switch.water_boiler
        from: "off"
        to: "on"
    action:
      service: input_datetime.set_datetime
      data:
        entity_id: "input_datetime.water_boiler_last_{{ trigger.to_state.state }}"
        datetime: "{{ now() }}"

  - id: Water Boiler - Notify Finished
    alias: Water Boiler - Notify Finished
    trigger:
      - platform: state
        entity_id: switch.water_boiler
        from: "on"
        to: "off"
        for:
          seconds: 1 #Let the metrics duration sensor update
    action:
      - service: notify.bffs
        data:
          message: 'Water boiler finished after {{ states("sensor.water_boiler_metrics_duration_last_time") }}! Have a nice shower :)'

sensor:
  - platform: history_stats
    name: Water Boiler Metrics Duration Today
    entity_id: switch.water_boiler
    state: "on"
    type: time
    start: "{{ now().replace(hour=0, minute=0, second=0) }}"
    end: "{{ now() }}"


template:
  - sensor:
    - name: "Water Boiler Metrics Duration Last Time"
      state: >
        {% set from_time = as_timestamp(now()) if is_state('switch.water_boiler', 'on') else state_attr('input_datetime.water_boiler_last_off', 'timestamp') %}
        {{ as_datetime(from_time - state_attr('input_datetime.water_boiler_last_on', 'timestamp')).strftime('%-Hh %-Mm') | regex_replace(find='^0h ', replace='') | regex_replace(find='\s+0m$', replace='') }}


  - trigger:
    - platform: time_pattern
      minutes: "/1"
    - platform: state
      entity_id: 
        - switch.water_boiler
        - input_datetime.water_boiler_last_off
    sensor:
      - name: "Water Boiler Metrics Time Since Finished"
        state: >
          {% if is_state('switch.water_boiler', 'on') %}
          0s
          {% else %}
          {{ as_datetime(state_attr('input_datetime.water_boiler_last_off', 'timestamp')) | relative_time | regex_replace(find=' year(s)?', replace='y')  | regex_replace(find=' months(s)?', replace='mo') | regex_replace(find=' day(s)?', replace='d') | regex_replace(find=' hour(s)?', replace='h') | regex_replace(find=' minute(s)?', replace='m')  | regex_replace(find=' second(s)?', replace='s') }}
          {% endif %}


  - binary_sensor:
    - name: "Water Boiler Was On Today"
      state: "{{ is_state('sensor.water_boiler_metrics_time_since_finished', '0s') or not states('sensor.water_boiler_metrics_time_since_finished') | string is match('^\\d*d') }}"

switch:
  - platform: template
    switches:
      water_boiler_with_timer:
        value_template: "{{ is_state('switch.water_boiler', 'on') }}"
        turn_on:
          service: switcher_kis.turn_on_with_timer
          target:
            entity_id: switch.water_boiler
          data:
            timer_minutes: "{{ states('input_number.water_boiler_timer_duration') | int }}"
        turn_off:
          service: switch.turn_off
          target:
            entity_id: switch.water_boiler