input_select:
  ac_smartauto_location:
    options:
      - "off"
      - living_room
      - office
      - birds
      - riley
      - bedroom

input_number:
  ac_smartauto_min_living_room:
    name: Living Room Min Temp
    min: 20
    max: 30
    step: 0.1
  ac_smartauto_max_living_room:
    name: Living Room Max Temp
    min: 20
    max: 30
    step: 0.1

  ac_smartauto_min_office:
    name: Office Min Temp
    min: 20
    max: 30
    step: 0.1
  ac_smartauto_max_office:
    name: Office Max Temp
    min: 20
    max: 30
    step: 0.1

  ac_smartauto_min_birds:
    name: Birds Min Temp
    min: 20
    max: 30
    step: 0.1
  ac_smartauto_max_birds:
    name: Birds Max Temp
    min: 20
    max: 30
    step: 0.1

  ac_smartauto_min_riley:
    name: Riley Min Temp
    min: 20
    max: 30
    step: 0.1
  ac_smartauto_max_riley:
    name: Riley Max Temp
    min: 20
    max: 30
    step: 0.1

  ac_smartauto_min_bedroom:
    name: Bedroom Min Temp
    min: 20
    max: 30
    step: 0.1
  ac_smartauto_max_bedroom:
    name: Bedroom Max Temp
    min: 20
    max: 30
    step: 0.1

input_boolean:
  ac_smartauto_min_cycle_passed:
  # ac_smartauto_manual:

switch:
  #AC Smart Auto Switch Between Fan & AC (When connected to internet)
  - platform: template
    switches:
      ac_smartauto:
        value_template: "{{ is_state(states('input_text.ac_entity_id'), states('input_text.last_ac_mode')) }}"
        turn_on:
          - service: climate.set_hvac_mode
            data:
              entity_id: "{{ states('input_text.ac_entity_id') }}"
              hvac_mode: "{{ states('input_text.last_ac_mode') }}"
          - service: input_boolean.turn_off
            entity_id: input_boolean.ac_smartauto_min_cycle_passed
        turn_off:
          - service: climate.set_hvac_mode
            data:
              entity_id: "{{ states('input_text.ac_entity_id') }}"
              hvac_mode: "fan_only"
          - service: input_boolean.turn_off
            entity_id: input_boolean.ac_smartauto_min_cycle_passed

sensor:
  - platform: template
    sensors:
      ac_smartauto:
        friendly_name: "AC SmartAuto Sensor"
        unit_of_measurement: "Â°C"
        value_template: "{{ states('sensor.' + states('input_select.ac_smartauto_location') + '_temperature') }}"

# {% if state_attr("fan.ac_damper_living_room", "speed") == "SmartAuto" and is_state("fan.ac_damper_living_room", "on") %}
#   {{ states("sensor.living_room_temperature") }}
# {% elif state_attr("fan.ac_damper_office", "speed") == "SmartAuto" and is_state("fan.ac_damper_office", "on" ) %}
#   {{ states("sensor.office_temperature") }}
# {% elif state_attr("fan.ac_damper_birds", "speed") == "SmartAuto" and is_state("fan.ac_damper_birds", "on") %}
#   {{ states("sensor.birds_temperature") }}
# {% elif state_attr("fan.ac_damper_riley", "speed") == "SmartAuto" and is_state("fan.ac_damper_riley", "on") %}
#   {{ states("sensor.riley_temperature") }}
# {% elif state_attr("fan.ac_damper_bedroom", "speed") == "SmartAuto" and is_state("fan.ac_damper_bedroom", "on") %}
#   {{ states("sensor.bedroom_temperature") }}
# {% endif %}

binary_sensor:
  - platform: template
    sensors:
      ac_smartauto_enabled:
        friendly_name: "AC SmartAuto Enabled"
        delay_on:
          seconds: 10
        delay_off:
          seconds: 10
        value_template: "{{ not is_state('input_select.ac_smartauto_location', 'off') }}"

automation:
  - alias: AC SmartAuto Change location to Off when SmartAuto Damper is turned off
    trigger:
      - platform: state
        entity_id: 
          - climate.ac_damper_living_room
          - climate.ac_damper_office
          - climate.ac_damper_birds
          - climate.ac_damper_riley
          - climate.ac_damper_bedroom
        from: "fan_only"
        to: "off"

    condition:
      - alias: "The damper is selected as SmartAuto"
        condition: template
        value_template: "{{ states('input_select.ac_smartauto_location') == trigger.to_state.entity_id | replace('climate.ac_damper_','') }}"

    action:
      - service: input_select.select_option
        data:  
          entity_id: input_select.ac_smartauto_location
          option: "off"

  - alias: AC SmartAuto Min Cycle Time Passed
    trigger:
      - platform: state
        entity_id: input_boolean.ac_smartauto_min_cycle_passed
        to: "off"
        for:
          minutes: 10

      - platform: homeassistant
        event: start

    action:
      - service: input_boolean.turn_on
        entity_id: input_boolean.ac_smartauto_min_cycle_passed

  - alias: AC SmartAuto
    trigger:
      #When temp changes
      - platform: state
        entity_id: sensor.ac_smartauto

      #When min cycle time passed
      - platform: state
        entity_id: input_boolean.ac_smartauto_min_cycle_passed
        to: "on"

      #When SmartAuto is turned on
      - platform: state
        entity_id: binary_sensor.ac_smartauto_enabled
        to: "on"

    condition:
      condition: and
      conditions:
        #SmartAuto is on
        - condition: state
          entity_id: binary_sensor.ac_smartauto_enabled
          state: "on"

        #And when any damper is on
        - condition: state
          entity_id: group.dampers
          state: "on"

        #And when min cycle passed
        - condition: state
          entity_id: input_boolean.ac_smartauto_min_cycle_passed
          state: "on"

        #And when AC is set to fan, heat, cool, unknown
        # - condition: state
        #   entity_id: climate.mainac
        #   state:
        #     - 'fan_only'
        #     - 'cool'
        #     - 'heat'
        #     - 'unknown'
        #     - 'unavailable'

        #And when AC is set to fan, heat, cool, unknown (updated to support manual_ac)
        - condition: template
          value_template: "{% set ac_entity_id = states('input_text.ac_entity_id') %}{{ is_state(ac_entity_id, 'fan_only') or is_state(ac_entity_id, 'cool') or is_state(ac_entity_id, 'heat') or is_state(ac_entity_id, 'unknown') or is_state(ac_entity_id, 'unavailable') }}"

    action:
      - choose:
          #When Temp is too damn high
          - conditions:
              - condition: template
                value_template: "{{ states('sensor.' + states('input_select.ac_smartauto_location') + '_temperature') > states('input_number.ac_smartauto_max_' + states('input_select.ac_smartauto_location')) }}"

            sequence:
              - service: switch.{{ "turn_on" if states('input_text.last_ac_mode') == "cool" else "turn_off" }}
                entity_id: switch.ac_smartauto
              - service: input_boolean.turn_off
                entity_id: input_boolean.ac_smartauto_min_cycle_passed

          #When Temp is too low
          - conditions:
              - condition: template
                value_template: "{{ states('sensor.' + states('input_select.ac_smartauto_location') + '_temperature') < states('input_number.ac_smartauto_min_' + states('input_select.ac_smartauto_location')) }}"

            sequence:
              - service: switch.{{ "turn_off" if states('input_text.last_ac_mode') == "cool" else "turn_on" }}
                entity_id: switch.ac_smartauto
              - service: input_boolean.turn_off
                entity_id: input_boolean.ac_smartauto_min_cycle_passed

script:
  toggle_ac_smartauto:
    sequence:
      - service: input_select.select_option
        data:
          entity_id: input_select.ac_smartauto_location
          option: "{{ 'off' if is_state('input_select.ac_smartauto_location', location) else location }}"