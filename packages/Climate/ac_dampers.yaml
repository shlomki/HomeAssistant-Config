#"temp_15": "JgBkAL4/ExIQFBAUEBUQNxQREDgTEhAUEDgTEg8VEBQQOBM1vj8RFBAVDxUQFBA4ExIPOBAVEBQQOBMSEBQQFBA4EzW+PxQREBUPFRAUEDgTEg84FBEQFQ84EBUQFBAVDzgTNf8ADQUAAAAA"
#"temp_16": "JgBmAL5AEhMPFRAUEBUPOBAVEDgSNhITDzgTEhAUEBUPOBM1vkASEw8VDxUQFBA4ExEROBA4EhMPOBMSEBQQFQ84EzW+QBETEBUPFRAUEDgQFQ84EjYSExA4ExIQFBAUEDgTNQABAAANBQAA"
#"temp_17": "JgBkAMA9EBQRFBAUEBQRNxE3ERQSEhAVETYRFBAVERIRNxI3wD0QFBEUEBQQFBE3ETcRFBAUEBURNhEUEBQQFBE3ETfBPRAUEBURExAUEDgQOBETERQQFBA4ERQQFBAUETcRN/8ADQUAAAAA"
#"temp_18": "JgBmAL8+ExIQFBETEBUQOBI2EhIQOBMSEDgSEhAUExIQOBI2vz4QFBEUExESEhE4EjYSEhA4ExEROBISEBQSExE3ETe+PxISERQQFBAUEzUTNRITEDgRExA4EhMQFBAUEjYTNQABAQANBQAA"
#"temp_19": "JgBmAL8+FBETERMRFBETNRM1EDgSEhQREzUTERQQExITNRM1vz4UEBQREhIUEBQ1EzUTNRMRFBAROBMRExEUERM1EzW+PxQQFBESEhMREDgUNBQ1ExETERQ0FBETERAUFDQTNgABAQANBQAA"
#"temp_20": "JgBkAME8ERMRFBAUERMRNxE3ETgRNxAUETcRExEUEhIRNxE3wTwRFBAUERMRFBA4EDgRNxE3ERQQOBAUEBQRFBA4EDjAPRAUERQQFBAUETcRNxE4EDgQFBA4ERMRFBAVETYRN/8ADQUAAAAA"
#"temp_21": "JgBmAL5AExIPFRAUEDgTEg8VEBQQFQ8VEDcUERAVDxUQOBM1vj8TEg8VEBQQOBMSEBQQFQ8UERQQOBMSDxUQFBA4EzW+PxMSEBQQFQ84ExIQFBAVDxUQFBA4ExIPFRAUEDgQOAABAgANBQAA"
#"temp_22": "JgBmAL8+ExIRExETETcTEhETERMRNxETEjYUEREUEBMSNhQ1vz4TEhATEhMRNxMSEBQRExE3ERMSNhMSERMRExI2EzXBPRMRERQRExE3ExIQExITETcTEhA3ExIRExETETcTNQABAgANBQAA"
#"temp_23": "JgBmAL8+ExISEhISEDgUERISEDgTEREUEjYSEhAUERQQOBI2vj8TERAVEBQRNxMREhMRNxISEBQRNxMSERMRExE3EzW/PxISEBQSExA4EhITERA4ExIQFBA4ExETEhAUEDgTNQABAQANBQAA"
#"temp_24": "JgBmAMA9ExISEhISEjYTEhISEjYTNRMSEjUTEhISEhMSNRM1wD0TEhISExISNRMSEhISNhM1ExISNRQREhMSEhI1EzXBPRMSEhISEhI2ExISEhI1EzUUERI2ExISEhISEjYTNQABAQANBQAA"
#"temp_25": "JgBmAME9EhITEhISEjYTEhI1ExISEhITEjUTEhISEhITNRM1wD0TEhITEhETNRQREjYTEhISEhISNhMSEhISEhI2EzXAPRMSEhISExI1ExISNRMSEhMSEhI1FBESExISEjUUNAABAgANBQAA"
#"temp_26": "JgBmAME9ExISEhISEjYTEhI1ExISNRMSEjYTEhISEhISNhI2wD0TEhISEhITNRMSEjUTEhI2ExISNRMSEhISEhM1EzXAPRMSEhITEhI1ExISNhMSEjUTEhI1ExISExISEjUTNQABAgANBQAA"
#"temp_27": "JgBmAME9ExISEhISEjYTEhI1EzUTEhISEjYTEhISEhISNhM1wD0TERMSEhITNRMSEjUTNRQREhMSNRMSEhISEhM1EzXAPRMSEhISExI1ExISNhM1ExISEhI1ExISExISEjUTNQABAgANBQAA"
#"temp_28": "JgBmAL8+ExIRExETETcTEhA3EjYTNRQRETcTEhAUERMRNxM1vz4TEhATEhMRNxMSEDcTNRM1ExIRNxMSEBMSExE3ETe/PhMSEBQRExE3ExIQNxM1EzUTEhE3ERMRFBATEjYUNQABAQANBQAA"
#"temp_29": "JgBkAMA9EBURExISEjYQOBEUEBQSEhEUETYRFBISEBUQNxE3wTwRFBITERIRNxE3ERQSExETEBQQOBAVEBQQFBA4EDi+PxAUERQSEhA4EDgRFBETEBQQFRA3ERQQFBISETcRN/8ADQUAAAAA"
#"temp_30": "JgBkAL4/ExETEhISEjYTNRMRExISNhISEzURFBISEhIQOBM1vj8TEhISEBQTNRM1ExISEhA4ExETNRMSEhISEhE3EzW+QBISEBQQFRI2EjYSEhISEzUTEhI2EhIQFBEUEDgSNv4ADQUAAAAA"
#"temp_31": "ExERFBAUEDgTNRMRETgRExAUEDgTEhETERMQOBM1vz4TEhAUERMRNxI3EhISNhMREBUSNhETEBQQFRE3Eja+PxISEBQRFBA4ETcTERM1ExIQFBA4ExETEhETEDgTNQABAQANBQAA"
#"temp_32": "JgBmAL8/EhITERMSEjYSNhISEzUTNRMREzUTEhISExETNRM1vkASEhISExISNhI2EhISNhI2ExETNRMSEhITERM1FDS/PxMREhITERM1EzYSEhM1EjYTERM1ExISEhMREzUTNQABAgANBQAA"

climate:
- platform: smartir
  name: AC Damper Living Room
  unique_id: ac_damper_living_room
  device_code: 1343
  controller_data: remote.living_room
  temperature_sensor: sensor.living_room_temperature

- platform: smartir
  name: AC Damper Office
  unique_id: ac_damper_office
  device_code: 1343
  controller_data: remote.office
  temperature_sensor: sensor.office_temperature

- platform: smartir
  name: AC Damper Guest Room
  unique_id: ac_damper_guest_room
  device_code: 1343
  controller_data: remote.guest_room
  temperature_sensor: sensor.guest_room_temperature
  humidity_sensor: sensor.guest_room_humidity

- platform: smartir
  name: AC Damper Secure Space
  unique_id: ac_damper_secure_space
  device_code: 1343
  controller_data: remote.secure_space
  temperature_sensor: sensor.secure_space_temperature

- platform: smartir
  name: AC Damper Bedroom
  unique_id: ac_damper_bedroom
  device_code: 1343
  controller_data: remote.bedroom
  temperature_sensor: sensor.bedroom_temperature

input_text:
  last_ac_mode:
    name: Last AC Mode

input_number:
  ac_damper_quick_to_medium:
    name: Quick to Medium (mins)
    min: 1
    max: 60
    step: 1
  ac_damper_quick_to_low:
    name: Medium to Low (mins)
    min: 1
    max: 60
    step: 1

script:
  ac_damper_sync_all:
    alias: Sync All
    mode: parallel
    sequence:
      - service: python_script.ac_damper_sync_all
  ac_damper_auto_heat:
    alias: AC Damper Auto Heat
    mode: parallel
    sequence:
      - repeat:
          count: 3
          sequence:
            - service: python_script.broadlink_send
              data:
                room: '{{ room }}'
                packet: 'JgBcAb89ExISEhISEhITNBM1EzUTNRMSEhISEhI1ExISNRMSEjUTEhI1EzUTNRMSEjUTEhISEjUTNRM1ExISNRMSEhISNRM1EzUTNBQ0FDQTNRM1EzUTNRM0FDQTNRM1EzUTNRM0FBETNBQRExETEhISEjUTEr88FBETEhISEhITNBM1EzUTNRMRExISEhI1ExISNRMSEzQTEhM0EzUTNRMSEjUTEhISEjUTNRM1ExETNRMRExISNRM1EzQUNBQ0EzUTNRM1EzQUNBQ0EzUTNRM0FDQUNBM1ExISNRMSEhISEhISEzQUEcA8FBESEhMRExETNBQ0FDQTNRMSEhITERM0FBETNBQREzQUERM0FDQTNRMSEjUTEhISEjUTNRM1ExISNRMSEhISNRM1EzUTNBQ0FDQTNRM1EzUTNBQ0FDQTNRM1EzUTNBQ0ExISNRQREhITERMSEjUTEgABAAANBQAAAAAAAAAAAAAAAA=='
            - delay: '00:00:01.500'
  ac_damper_high_heat:
    alias: AC Damper High Heat
    mode: parallel
    sequence:
      - repeat:
          count: 3
          sequence:
            - service: python_script.broadlink_send
              data:
                room: '{{ room }}'
                packet: 'JgBcAb4/ExIPFRAUEDgSEhAVDzgTNRMSEBQQFBA4EjYSEhAVDzgTEhA3EzUTEhAUEBUPFRAUEDgRNxA4EhIQFQ8VEBQQOBE3ETYSNhM1EjYTNRM1EzUSNhM1EjYSNhA4EjYTNRI2ExIPOBITEBQQFQ8VDzgSE74+EhMQFBAVDzgTEg8VEDcSNhITEBQQFQ84EjYTEhETEDgRExE3EDgRExETEhMRExETEDgQOBA4ERQPFQ8VEBQSNhE3ETcRNxE3ETYSNhI2EjYSNxI1EjYSNhI2EjYSNhI2EhMRNhISERQSEhAVDzgSE74+EhISExETEjYQFRETDzgRNxITERMRExE3ETcRFA8VDzgSExE2EjYSExETEhMRExETEjYRNhI2EhMSEw8VERMQNxI2EjcRNhI2EjYSNhI2EjYSNhI2EjYSNhI2ETcSNhI2ERMQOBITERMRExAVETYQFQABAAANBQAAAAAAAAAAAAAAAA=='
            - delay: '00:00:01.500'
  ac_damper_medium_heat:
    alias: AC Damper Medium Heat
    mode: parallel
    sequence:
      - repeat:
          count: 3
          sequence:
            - service: python_script.broadlink_send
              data:
                room: '{{ room }}'
                packet: 'JgBaAb0/FBEQFBAUEDgUEQ8VEDcUNBMSEBQQFBA4FDQTEg8VEDcUERA4ExEQOBMSDxQQFRAUEDgUNBM1ExEQFQ8UEBUQOBQ0EDcUNBE3EDgUNBM1FDQTNRM1EzUTNRM1EzUQOBA4FBAQOBMSDxUQFBAUEDgUEcA8FBEPFBAVEDcUERAUEDgUNBAVDxUPFRA4EDcRFBAUEDgUEQ84EBQQOBQRDxUQFBAUEDgUNBQ0ExIPFBEUEBQQOBQ0EzUTNRQ0EzUTNBQ0FDQUNBQ0EzUTNRM1FDQTNRM1EBUPOBQREBQQFBAUEDgQFME8FBEPFBEUEDgQFBAUEDgTNRMSDxUQFBA4EzQUERAVDzgUEBA4ExIQNxQREBQQFBAUEDgUNBM1ExIPFRAUEBQQOBQ0EzUTNRM1EzUQNxE3FDQQOBA4EzUTNRQ0EzUTNRM1ExEQOBQREBQQFBAUEDgUEf0ADQUAAAAAAAAAAAAAAAAAAA=='
            - delay: '00:00:01.500'
  ac_damper_low_heat:
    alias: AC Damper Low Heat
    mode: parallel
    sequence:
      - repeat:
          count: 3
          sequence:
            - service: python_script.broadlink_send
              data:
                room: '{{ room }}'
                packet: 'JgBaAcE8ExIQFBAUEDgTEg8VDzgTNRMSEBQQFBA4EDgTEg8VEDcTEhA3FBEQFQ8VDxUQFBAUEDgTNRM1EhMPFRAUEBQQFQ84EzUTNRM1EzUTNRE3EzUTNRM1EDgTNRM1EDgTNRM1ExEQOBMSDxUPFRAUEDgTEcA9EBQQFQ8VEDcTEhAUEDgQOBMSDxUPFBE3EzUTEhAUEDgTEg84ExIPFRAUEBUPFQ8VEDcTNRQ1EhIQFBAVDxQQFRA4EzUTNBQ0FDQUNBQ0EzUTNRM1EzUTNRM1EzUTNRM1EBUPOBQREBQQFBAVDzgTEsA8ExIPFRAUEDgUEQ8VDzgTNRQREBQQFBA4EzUTEg8UEDgQFBE3FBEQFBAUEBUQFBAUEDgQOBQ0ExIPFBAUERQQFBA4EzUQOBM1EzUTNRM1EzUTNRM0FDQUNBQ0FDQTNRM1ExIQNxQREBQQFBAUETcUEf4ADQUAAAAAAAAAAAAAAAAAAA=='
            - delay: '00:00:01.500'

  ac_damper_auto_cool:
    alias: AC Damper Auto Cool
    mode: parallel
    sequence:
      # - repeat:
      #     count: 3
      #     sequence:
      #       - service: python_script.broadlink_send
      #         data:
      #           room: '{{ room }}'
      #           #Unknown
      #           #packet: 'JgBcAb4/EBQRFBISEzUQFBA4EjYTNRAUERMRFBA4EBQTEREUEjURFBI2EDgTNRAUExISERE3ETcRNxE3ETcRFBISEDgQFBE3EDgQOBA4EDgQOBA4EDgQOBA4EDgQOBA4EDgQOBA4EhIQOBAUERMRNxEUEDgQFL4/EBQQFBETETcRFBA4EDgQOBAUEBQRExE3ERQQFBAUETcRExE3EzURNxEUEBQQFBE3EDgQOBA4EDgQFBEUEDcRFBA4EDgQOBM1EDgTNRA4EDcRNxE3ETcRNxE3ETcRNxE3ERQQNxEUEhIQOBAUETcTEr89ERQQFBAUETcRExE3ETcRNxEUEBQQFBA4EBQRFBAUEDgSEw84EDgQOBAUERMRFBA4EDgQOBA4EDgQFBAUETcSEhE3ETcRNxE3ETcRNxE3ETcSNhE3EDgQOBA4EDgQOBA4EBQRNxETERQSNhAUEDgQFAABAAANBQAAAAAAAAAAAAAAAA=='
                
      #           #25 degrees, auto fan. Taken at 29 degrees.
      #           packet: 'JgBcAcA9ExISEhISEzUTNRMSEhITEhISEhITERM1ExISNhMSEhETEhI2EjYTNRMSEhISEhM1EzUTNRM1EzUUNBQ1ExISNRM1EzUTNRM1FDUTNRM1EzUTNRM1EzUTNRM1FDQUNRM1ExISNRMSEhISNhMSEjUTEsA9ExISERMSEjYSNhMSEhISEhISExETEhI2ExISNRMSEhISEhM1EzUTNRQREhMSERM1FDQUNRI2EzUTNRM1ExISNhM1EzUTNRM1EzUTNRM1EzUTNRM1FDQUNRM1EzUTNRM1ExISNRQREhMSNRMSEjYTEsA8ExISEhISEzUTNRMSEhISExIRExISExI1ExISNRMSEhMSERM1FDUSNhMSEhETEhI2EzUSNhM1EzUTNRM1ExISNhM1EzUTNRM1EzUTNRM1EzUUNBQ1EzUTNRM1EzUTNRM1ExISNhISEhITNRMSEjYSEwABAAANBQAAAAAAAAAAAAAAAA=='
                
      #           #26 degrees, auto fan. Taken at 30 degrees.
      #           #packet: 'JgBcAcA9ExISEhISEjYSNhMSEhISNhMSEhISEhI2ExISNRMSEjUUERI2EzUTNRMSEhISNhMSEhISEhITEhISNRQREhMSEhI1FDQTNhM1EzUTNRM1EzUSNhM1EzUTNRM1EzUUNRM1ExISNRMRExISNhMSEjUTEsA8FBESExISEjUUNRMREhMSNRMSEhISExI1ExISNhITEjUTEhI1FDQUNRMSERMSNRMSEhISExISEhISNhMSEhISEhI2EzUTNRM1EzUTNRM1EzUUNRM1EzUTNRM1EjYTNRM1ExISNhMREhMSNRMSEjYTEsA8ExISEhITEjUTNRMSEhISNhMSEhISEhI2ExISNRMSEjYTEhI1EzUTNRMSEhISNhMSEhISEhITEhETNRQREhMSEhI1FDUTNRM1EzUTNRM1EzUTNRM1EzUTNRM1FDUTNRM1ExISNRMSEhISNhMSEjUTEgABAAANBQAAAAAAAAAAAAAAAA=='
      #       - delay: '00:00:01.500'
      - service: climate.set_fan_mode
        data:
          entity_id: "climate.ac_damper_{{room}}"
          fan_mode: Auto
      - delay: '00:00:01.500'
      - service: climate.set_temperature
        data:
          entity_id: "climate.ac_damper_{{room}}"
          temperature: 25
  ac_damper_high_cool:
    alias: AC Damper High Cool
    mode: parallel
    sequence:
      - repeat:
          count: 3
          sequence:
            - service: python_script.broadlink_send
              data:
                room: '{{ room }}'
                packet: 'JgBaAb1AExEQFQ8VEDcUERAUEDgUNBAUEBQQFRAUEDgTEg84EzUTEg84FDQTEhAUEBQQFBAVEDcUNBMSEDgTNBQREDgQFBA4EzUTNRM1EDgTNRM1EzUTNRM1EzUTNRM1EzQRNxQ1EBQQOBQQEBUPOBQREDcTEsA8ExIQFBAVDzgUEQ8VEDcUNBQREBQQFQ8VEDgQFBA4EzUTERA4EzUTEg8VDxQRFBAUEDgTNRMSDzgTNRAVDzgTEhA3FDQTNRM1EzUTNRM1EDgTNRM1EzUTNRM1EzUTNRM1ExIPOBAUEBQRNxQREDgTEcA8FBEQFQ8VDzgTEhAUEDgTNRMREBUPFQ8VEDcUERA4EzUTERA4EzUTEg8VDxUQFBAVDzgTNRMSDzgTNRMSDzgTEhA3FDQUNBQ0EzUQOBA4EzUTNRM1EzUTNRM1EzUTNRA4ERQPOBMSDxUQNxQREDgTEf4ADQUAAAAAAAAAAAAAAAAAAA=='
            - delay: '00:00:01.500'
  ac_damper_medium_cool:
    alias: AC Damper Medium Cool
    mode: parallel
    sequence:
      - repeat:
          count: 3
          sequence:
            - service: python_script.broadlink_send
              data:
                room: '{{ room }}'
                packet: 'JgBaAb0/FBEQFBAUEDgQFQ8VEDgUMxQREBQQFBAVEDcSExA4EzUTERA4FBEPOBQRDxUQFBAUEDgQOBMSDzgTNRMSEDcUERA4EzUTNRM1EzUUMxQ1EDcUNBQ0FDQTNRM1FDQUNBM1ExIQNxQREBQQOBQRDzgQFcA8ExIPFRAUEDgTEg8UEDgTNRAUERQQFBAUEDgUEQ84EzUUERA3FBEQOBQQEBQQFBAVEDcUNBQREDgUNBAUEDgUEQ84FDQUNBM1EzUTNRA4FDQTNRM1EzUQOBM1ETcTNRM0FBEQOBAUEBQQOBQREDcRFMA8FBEQFBAVDzgUEQ8VEDcRNxQREBQQFBAUEDgUERA3FDQUERA4FBAQOBQRDxUPFRAUEDgQOBQQEDgTNRMSDzgQFQ84EzUTNRM1EzUTNRM1EzUTNRQ0EDgTNRI2EzUTNBQ0FBEQOBMREBUPOBQRDzgUEf4ADQUAAAAAAAAAAAAAAAAAAA=='
            - delay: '00:00:01.500'
  ac_damper_low_cool:
    alias: AC Damper Low Cool
    mode: parallel
    sequence:
      - repeat:
          count: 3
          sequence:
            - service: python_script.broadlink_send
              data:
                room: '{{ room }}'
                packet: 'JgBaAb4/FBEPFBITETcUEBAUEDgUNBMSDxUQFBETEDgUEQ84FDQTEg84FBEQFBAUEBQQFRAUEDgRNxQRDzgUNBMREDgUNBM1EzUTNRM1EzUTNRM1EDgUNBM1EzUTNRM1EzUTNRM0FBERNxQRDxQRNxMSEDcUEcA8ERQQFBAUEDgUEQ8VEDcVMxQREBQQFBAVEDcUERA4EzURExA4EBQQFBAVEBQQFBAUETcUNBQREDcRNxMSEDgUMxQ1EzQRNxQ0EzUQOBQ0EzUQOBQ0EzUUNBM1FDQTNRM1ExIPOBQREBQQNxQREDgTEcE7FBEQFBAUEDgUERAUEDgUNBAUEBQQFBEUEDgUEBA4EDgQFBA4EBQQFBEUEBQQFBAUETcUNBAVEDgUNBMREDgTNRM1EzUTNRM0FDQUNBQ0FDQUNBQ0FDQTNRQ0EzUTNRM1ExIPOBQREBQQOBQRDzgTEv0ADQUAAAAAAAAAAAAAAAAAAA=='
            - delay: '00:00:01.500'
  ac_damper_off:
    alias: AC Damper Off
    mode: parallel
    sequence:
      - repeat:
          count: 3
          sequence:
            - service: python_script.broadlink_send
              data:
                room: '{{ room }}'
        #         packet: 'JgJaAb1AFBAQFBAUEDgUERAUEDgTEg8UEBQRFBA4EDgUEBAUEDgUEQ8VEDcUERAUEBQQOBQREBQQOBQQEBUPFBEUEDgQOBM1EDcUNBE3FDQUNBA4FDQUNBM1EzUQOBA4EzUUNBM1ExIPOBQRDxUQFBAUEDgUEcA8FBEPFBEUEDgUEBAUEDgUEBEUEBQQFBA4FDQTEg8VEDcUERAUEDgUEQ8UEBUQNxQREBQQOBQRDxQQFRAUEDgUNBQ0EzUTNRM1FDMUNBE3FDQTNRQ0FDQTNRM1EzUTNRM1ExIPOBQREBQQFBAUEDgUEcE7ExERFBAUEDgUEQ8UEDgUERAUEBQQFBA4FDQQFRAUEDgUEBAVDzgTEg8VEBQQOBQQEBQQOBQRDxUQFBAUEDgUNBA4FDQTNRM1EzUTNRM1EzUQOBM1EzQUNBQ0FDQUNBM1FBEQNxEUEBQQFBAUETcUEf4ADQUAAAAAAAAAAAAAAAAAAA=='
                packet: 'JgBaAb1AFBAQFBAUEDgUERAUEDgTEg8UEBQRFBA4EDgUEBAUEDgUEQ8VEDcUERAUEBQQOBQREBQQOBQQEBUPFBEUEDgQOBM1EDcUNBE3FDQUNBA4FDQUNBM1EzUQOBA4EzUUNBM1ExIPOBQRDxUQFBAUEDgUEcA8FBEPFBEUEDgUEBAUEDgUEBEUEBQQFBA4FDQTEg8VEDcUERAUEDgUEQ8UEBUQNxQREBQQOBQRDxQQFRAUEDgUNBQ0EzUTNRM1FDMUNBE3FDQTNRQ0FDQTNRM1EzUTNRM1ExIPOBQREBQQFBAUEDgUEcE7ExERFBAUEDgUEQ8UEDgUERAUEBQQFBA4FDQQFRAUEDgUEBAVDzgTEg8VEBQQOBQQEBQQOBQRDxUQFBAUEDgUNBA4FDQTNRM1EzUTNRM1EzUQOBM1EzQUNBQ0FDQUNBM1FBEQNxEUEBQQFBAUETcUEf4ADQUAAAAAAAAAAAAAAAAAAA=='
            - delay: '00:00:01.500'

  # ac_main_off:
  #   mode: parallel
  #   sequence:
  #     - service: python_script.broadlink_send
  #       data:
  #         room: 'living_room'
  #         packet: 'JgAQAQABB4o3GBU5FjkYNxg2FjkYNhk2Nxg2GRU5FTk3GBU5FzgVOhY4FzgWORc3NRo2GBc4GDYWORY5GDYWORU6FTkWORg3FTkYNxg2FzgWORg2FjkXOBg3NhgVOhg2GDcWODcYNhkVORc4FTkXOBc5FTg2GTYYFjk1GRY5FTkZNjUZFjkYNj0AA4YAAQWLNxgVORY6GDYWORY5FTkXODYYNhkVORc4NhgYNxU5GTYWORU6FTkYNzYZNBoYNhY5GDcVORg3FToWOBg3FTkYNxc4GDcXOBU5FzgYNhc4GDcXNzcYFjgYNxg3FTk2GTYYFjkVOhg2FjkYNhk2NRo2GBY5NhgWORc3GTY1GxU4FTk9AA0FAAAAAAAAAAA='

input_boolean:
  ac_damper_living_room:
  ac_damper_office:
  ac_damper_guest_room:
  ac_damper_secure_space:
  ac_damper_bedroom:

  ac_damper_oscillating:

  ac_damper_living_room_need_update:
  ac_damper_office_need_update:
  ac_damper_guest_room_need_update:
  ac_damper_secure_space_need_update:
  ac_damper_bedroom_need_update:

group:
  dampers:
    entities:
      - fan.ac_damper_living_room
      - fan.ac_damper_office
      - fan.ac_damper_guest_room
      - fan.ac_damper_secure_space
      - fan.ac_damper_bedroom

input_select:
  ac_damper_living_room:
    options:
      - Low
      - Medium
      - High
      - Auto
      - Quick
      - SmartAuto

  ac_damper_office:
    options:
      - Low
      - Medium
      - High
      - Auto
      - Quick
      - SmartAuto

  ac_damper_guest_room:
    options:
      - Low
      - Medium
      - High
      - Auto
      - Quick
      - SmartAuto

  ac_damper_secure_space:
    options:
      - Low
      - Medium
      - High
      - Auto
      - Quick
      - SmartAuto

  ac_damper_bedroom:
    options:
      - Low
      - Medium
      - High
      - Auto
      - Quick
      - SmartAuto

automation:
  - alias: When all dampers are off set ac to heat/cool so it shuts off
    trigger:
      platform: state
      entity_id: group.dampers
      to: 'off'
      for:
        seconds: 10
    action:
      - service: switch.turn_on
        entity_id: switch.ac_smartauto

  - alias: Save last ac mode
    trigger:
      - platform: state
        entity_id: climate.main_ac
      - platform: state
        entity_id: climate.manual_ac
    condition:
      condition: template
      value_template: '{{ trigger.to_state.state == "cool" or trigger.to_state.state == "heat" }}'
    action:
      - service: input_text.set_value
        entity_id: input_text.last_ac_mode
        data:
          value: '{{ trigger.to_state.state }}'

  - alias: Reset oscillating
    trigger:
      platform: state
      entity_id: input_boolean.ac_damper_oscillating
      from: 'off'
      to: 'on'
      for:
        seconds: 1
    action:
      - service: input_boolean.turn_off
        entity_id: input_boolean.ac_damper_oscillating

  # - alias: Control Damper Speed from Google
  #   trigger:
  #     platform: state
  #     entity_id: input_boolean.ac_damper_oscillating

  #     for:
  #       seconds: 1
  #   action:
  #     - service: input_boolean.turn_off
  #       entity_id: input_boolean.ac_damper_oscillating

  - alias: AC Damper Quick
    mode: parallel
    trigger:
      - platform: state
        entity_id: 
          - fan.ac_damper_living_room
          - fan.ac_damper_office
          - fan.ac_damper_guest_room
          - fan.ac_damper_secure_space
          - fan.ac_damper_bedroom
        attribute: 'speed'
        to: 'Quick'
        for:
          minutes: "{{ states('input_number.ac_damper_quick_to_medium')|int }}"
    variables:
      room: "{{ trigger.to_state.entity_id | replace('fan.ac_damper_', '') }}"
    action:
      - service: python_script.ac_damper
        data:
          room: "{{ room }}"
          speed: "Medium"
          action: send_command
      #Wait for a few more minutes
      - delay: "{{ states('input_number.ac_damper_quick_to_low') | multiply(60) | int }}"
      #If the damper is still set to quick, continue
      - condition: template
        value_template: "{{ state_attr(trigger.to_state.entity_id, 'speed') == 'Quick' }}"
      - service: fan.set_speed
        data:
          entity_id: 'fan.ac_damper_{{room}}'
          speed: 'Low'

#Notify when windows are open
  - alias: AC on with open window - Living Room
    trigger:
      - platform: state
        entity_id: input_boolean.ac_damper_living_room
        from: 'off'
        to: 'on'
        for:
          seconds: 60
      - platform: state
        entity_id: 
          - climate.main_ac
          - climate.manual_ac
        from:  'fan_only'
        to:  'cool'
      - platform: state
        entity_id: 
          - climate.main_ac
          - climate.manual_ac
        from:  'fan_only'
        to:  'heat'
    condition:
      condition: and
      conditions: 

      # - condition: or
      #   conditions: #When AC is on heat or cool or unknown (when disconnected from server)
      #     - condition: state
      #       entity_id: climate.main_ac
      #       state: 'heat'
      #     - condition: state
      #       entity_id: climate.main_ac
      #       state: 'cool'
      #     - condition: state
      #       entity_id: climate.main_ac
      #       state: 'unknown'

      #When AC is on heat or cool or unknown (when disconnected from server) (updated to support manual_ac)
      - condition: template
        value_template: "{% set ac_entity_id = states('input_text.ac_entity_id') %}{{ is_state(ac_entity_id, 'heat') or is_state(ac_entity_id, 'cool') or is_state(ac_entity_id, 'unknown') or is_state(ac_entity_id, 'unavailable') }}"

      - condition: or
        conditions: #When balcony or bathroom open
          - condition: state
            entity_id: binary_sensor.balcony_window
            state: 'on'
          - condition: state
            entity_id: binary_sensor.bathroom_door
            state: 'on'

      - condition: state
        entity_id: input_boolean.ac_damper_living_room
        state: 'on'
    action:
      - service: script.notify_all
        data:
          message: >
            {% set balcony_window = is_state("binary_sensor.balcony_window", "on") -%}
            {% set bathroom_door = is_state("binary_sensor.bathroom_door", "on") -%}
            {% set both = (balcony_window and bathroom_door) %}
            Living Room AC is on. Please close the {{ 'balcony window' if balcony_window }}{{ ' and the ' if both }}{{ 'bathroom door' if bathroom_door }}.

  - alias: Update room temperature for dampers
    mode: parallel
    trigger:
        #Damper was turned on 15 seconds ago
        - platform: state
          entity_id:
            - fan.ac_damper_living_room
            - fan.ac_damper_office
            - fan.ac_damper_guest_room
            - fan.ac_damper_secure_space
            - fan.ac_damper_bedroom
          to: 'on'
          for:
            seconds: 15

        #Damper speed has changed 10 seconds ago
        - platform: state
          entity_id:
            - input_select.ac_damper_living_room
            - input_select.ac_damper_office
            - input_select.ac_damper_guest_room
            - input_select.ac_damper_secure_space
            - input_select.ac_damper_bedroom
          to: 'Auto'
          for:
            seconds: 10

        # It's been 4 minutes since last update
        - platform: state
          entity_id:
            - input_boolean.ac_damper_living_room_need_update
            - input_boolean.ac_damper_office_need_update
            - input_boolean.ac_damper_guest_room_need_update
            - input_boolean.ac_damper_secure_space_need_update
            - input_boolean.ac_damper_bedroom_need_update
          to: 'off'
          for:
            minutes: 4

        #Temperature sensor changed
        - platform: state
          entity_id: 
            - sensor.living_room_temperature
            - sensor.office_temperature
            - sensor.guest_room_temperature
            - sensor.secure_space_temperature
            - sensor.bedroom_temperature

    condition:
      #Is damper on
      - condition: template
        value_template: >
          {% set room = 
          (trigger.to_state.entity_id
          | replace('input_boolean.', '')
          | replace('fan.', '')
          | replace('input_select.', '')
          | replace('sensor.', '')
          | replace('ac_damper_', '')
          | replace('_need_update', '')
          | replace('_temperature', '')) %}{{ is_state('fan.ac_damper_' + room, 'on') }}

    action:
      - service: python_script.update_ac_room_temp
        data:
          room: '{{ trigger.to_state.entity_id }}'

fan:
  - platform: template
    fans:
      ac_damper_living_room:
        friendly_name: "Living Room AC"
        value_template: "{{ states('input_boolean.ac_damper_living_room') }}"
        speed_template: "{{ states('input_select.ac_damper_living_room') }}"
        oscillating_template: "{{ 'True' if (states('input_boolean.ac_damper_oscillating') == 'on') else 'False' }}"
        availability_template: "{{ is_state('remote.living_room', 'on') }}"
        turn_on:
          service: python_script.ac_damper
          data:
            room: living_room
            speed: "{{ speed }}"
            action: turn_on
        set_speed:
          service: python_script.ac_damper
          data:
            room: living_room
            speed: "{{ speed }}"
            action: set_speed
        set_oscillating:
          service: python_script.ac_damper
          data:
            room: living_room
            action: sync
        turn_off:
          - service: python_script.ac_damper
            data:
              room: living_room
              action: turn_off
        speeds:
          - 'Low'
          - 'Medium'
          - 'High'
          - 'Auto'
          - 'Quick'
          - 'SmartAuto'

  - platform: template
    fans:
      ac_damper_office:
        friendly_name: "Office AC"
        value_template: "{{ states('input_boolean.ac_damper_office') }}"
        speed_template: "{{ states('input_select.ac_damper_office') }}"
        oscillating_template: "{{ 'True' if (states('input_boolean.ac_damper_oscillating') == 'on') else 'False' }}"
        availability_template: "{{ is_state('remote.office', 'on') }}"
        turn_on:
          service: python_script.ac_damper
          data:
            room: office
            speed: "{{ speed }}"
            action: turn_on
        set_speed:
          service: python_script.ac_damper
          data:
            room: office
            speed: "{{ speed }}"
            action: set_speed
        set_oscillating:
          service: python_script.ac_damper
          data:
            room: office
            action: sync
        turn_off:
          - service: python_script.ac_damper
            data:
              room: office
              action: turn_off
        speeds:
          - 'Low'
          - 'Medium'
          - 'High'
          - 'Auto'
          - 'Quick'
          - 'SmartAuto'

  - platform: template
    fans:
      ac_damper_guest_room:
        friendly_name: "Guest Room AC"
        value_template: "{{ states('input_boolean.ac_damper_guest_room') }}"
        speed_template: "{{ states('input_select.ac_damper_guest_room') }}"
        oscillating_template: "{{ 'True' if (states('input_boolean.ac_damper_oscillating') == 'on') else 'False' }}"
        availability_template: "{{ is_state('remote.guest_room', 'on') }}"
        turn_on:
          service: python_script.ac_damper
          data:
            room: guest_room
            speed: "{{ speed }}"
            action: turn_on
        set_speed:
          service: python_script.ac_damper
          data:
            room: guest_room
            speed: "{{ speed }}"
            action: set_speed
        set_oscillating:
          service: python_script.ac_damper
          data:
            room: guest_room
            action: sync
        turn_off:
          - service: python_script.ac_damper
            data:
              room: guest_room
              action: turn_off
        speeds:
          - 'Low'
          - 'Medium'
          - 'High'
          - 'Auto'
          - 'Quick'
          - 'SmartAuto'

  - platform: template
    fans:
      ac_damper_secure_space:
        friendly_name: "Secure Space AC"
        value_template: "{{ states('input_boolean.ac_damper_secure_space') }}"
        speed_template: "{{ states('input_select.ac_damper_secure_space') }}"
        oscillating_template: "{{ 'True' if (states('input_boolean.ac_damper_oscillating') == 'on') else 'False' }}"
        availability_template: "{{ is_state('remote.secure_space', 'on') }}"
        turn_on:
          service: python_script.ac_damper
          data:
            room: secure_space
            speed: "{{ speed }}"
            action: turn_on
        set_speed:
          service: python_script.ac_damper
          data:
            room: secure_space
            speed: "{{ speed }}"
            action: set_speed
        set_oscillating:
          service: python_script.ac_damper
          data:
            room: secure_space
            action: sync
        turn_off:
          - service: python_script.ac_damper
            data:
              room: secure_space
              action: turn_off
        speeds:
          - 'Low'
          - 'Medium'
          - 'High'
          - 'Auto'
          - 'Quick'
          - 'SmartAuto'

  - platform: template
    fans:
      ac_damper_bedroom:
        friendly_name: "Bedroom AC"
        value_template: "{{ states('input_boolean.ac_damper_bedroom') }}"
        speed_template: "{{ states('input_select.ac_damper_bedroom') }}"
        oscillating_template: "{{ 'True' if (states('input_boolean.ac_damper_oscillating') == 'on') else 'False' }}"
        availability_template: "{{ is_state('remote.bedroom', 'on') }}"
        turn_on:
          service: python_script.ac_damper
          data:
            room: bedroom
            speed: "{{ speed }}"
            action: turn_on
        set_speed:
          service: python_script.ac_damper
          data:
            room: bedroom
            speed: "{{ speed }}"
            action: set_speed
        set_oscillating:
          service: python_script.ac_damper
          data:
            room: bedroom
            action: sync
        turn_off:
          - service: python_script.ac_damper
            data:
              room: bedroom
              action: turn_off
        speeds:
          - 'Low'
          - 'Medium'
          - 'High'
          - 'Auto'
          - 'Quick'
          - 'SmartAuto'