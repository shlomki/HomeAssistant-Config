#"temp_15": "JgBkAL4/ExIQFBAUEBUQNxQREDgTEhAUEDgTEg8VEBQQOBM1vj8RFBAVDxUQFBA4ExIPOBAVEBQQOBMSEBQQFBA4EzW+PxQREBUPFRAUEDgTEg84FBEQFQ84EBUQFBAVDzgTNf8ADQUAAAAA"
#"temp_16": "JgBmAL5AEhMPFRAUEBUPOBAVEDgSNhITDzgTEhAUEBUPOBM1vkASEw8VDxUQFBA4ExEROBA4EhMPOBMSEBQQFQ84EzW+QBETEBUPFRAUEDgQFQ84EjYSExA4ExIQFBAUEDgTNQABAAANBQAA"
#"temp_17": "JgBkAMA9EBQRFBAUEBQRNxE3ERQSEhAVETYRFBAVERIRNxI3wD0QFBEUEBQQFBE3ETcRFBAUEBURNhEUEBQQFBE3ETfBPRAUEBURExAUEDgQOBETERQQFBA4ERQQFBAUETcRN/8ADQUAAAAA"
#"temp_18": "JgBmAL8+ExIQFBETEBUQOBI2EhIQOBMSEDgSEhAUExIQOBI2vz4QFBEUExESEhE4EjYSEhA4ExEROBISEBQSExE3ETe+PxISERQQFBAUEzUTNRITEDgRExA4EhMQFBAUEjYTNQABAQANBQAA"
#"temp_19": "JgBmAL8+FBETERMRFBETNRM1EDgSEhQREzUTERQQExITNRM1vz4UEBQREhIUEBQ1EzUTNRMRFBAROBMRExEUERM1EzW+PxQQFBESEhMREDgUNBQ1ExETERQ0FBETERAUFDQTNgABAQANBQAA"
#"temp_20": "JgBkAME8ERMRFBAUERMRNxE3ETgRNxAUETcRExEUEhIRNxE3wTwRFBAUERMRFBA4EDgRNxE3ERQQOBAUEBQRFBA4EDjAPRAUERQQFBAUETcRNxE4EDgQFBA4ERMRFBAVETYRN/8ADQUAAAAA"
#"temp_21": "JgBmAL5AExIPFRAUEDgTEg8VEBQQFQ8VEDcUERAVDxUQOBM1vj8TEg8VEBQQOBMSEBQQFQ8UERQQOBMSDxUQFBA4EzW+PxMSEBQQFQ84ExIQFBAVDxUQFBA4ExIPFRAUEDgQOAABAgANBQAA"
#"temp_22": "JgBmAL8+ExIRExETETcTEhETERMRNxETEjYUEREUEBMSNhQ1vz4TEhATEhMRNxMSEBQRExE3ERMSNhMSERMRExI2EzXBPRMRERQRExE3ExIQExITETcTEhA3ExIRExETETcTNQABAgANBQAA"
#"temp_23": "JgBmAL8+ExISEhISEDgUERISEDgTEREUEjYSEhAUERQQOBI2vj8TERAVEBQRNxMREhMRNxISEBQRNxMSERMRExE3EzW/PxISEBQSExA4EhITERA4ExIQFBA4ExETEhAUEDgTNQABAQANBQAA"
#"temp_24": "JgBmAMA9ExISEhISEjYTEhISEjYTNRMSEjUTEhISEhMSNRM1wD0TEhISExISNRMSEhISNhM1ExISNRQREhMSEhI1EzXBPRMSEhISEhI2ExISEhI1EzUUERI2ExISEhISEjYTNQABAQANBQAA"
#"temp_25": "JgBmAME9EhITEhISEjYTEhI1ExISEhITEjUTEhISEhITNRM1wD0TEhITEhETNRQREjYTEhISEhISNhMSEhISEhI2EzXAPRMSEhISExI1ExISNRMSEhMSEhI1FBESExISEjUUNAABAgANBQAA"
#"temp_26": "JgBmAME9ExISEhISEjYTEhI1ExISNRMSEjYTEhISEhISNhI2wD0TEhISEhITNRMSEjUTEhI2ExISNRMSEhISEhM1EzXAPRMSEhITEhI1ExISNhMSEjUTEhI1ExISExISEjUTNQABAgANBQAA"
#"temp_27": "JgBmAME9ExISEhISEjYTEhI1EzUTEhISEjYTEhISEhISNhM1wD0TERMSEhITNRMSEjUTNRQREhMSNRMSEhISEhM1EzXAPRMSEhISExI1ExISNhM1ExISEhI1ExISExISEjUTNQABAgANBQAA"
#"temp_28": "JgBmAL8+ExIRExETETcTEhA3EjYTNRQRETcTEhAUERMRNxM1vz4TEhATEhMRNxMSEDcTNRM1ExIRNxMSEBMSExE3ETe/PhMSEBQRExE3ExIQNxM1EzUTEhE3ERMRFBATEjYUNQABAQANBQAA"
#"temp_29": "JgBkAMA9EBURExISEjYQOBEUEBQSEhEUETYRFBISEBUQNxE3wTwRFBITERIRNxE3ERQSExETEBQQOBAVEBQQFBA4EDi+PxAUERQSEhA4EDgRFBETEBQQFRA3ERQQFBISETcRN/8ADQUAAAAA"
#"temp_30": "JgBkAL4/ExETEhISEjYTNRMRExISNhISEzURFBISEhIQOBM1vj8TEhISEBQTNRM1ExISEhA4ExETNRMSEhISEhE3EzW+QBISEBQQFRI2EjYSEhISEzUTEhI2EhIQFBEUEDgSNv4ADQUAAAAA"
#"temp_31": "ExERFBAUEDgTNRMRETgRExAUEDgTEhETERMQOBM1vz4TEhAUERMRNxI3EhISNhMREBUSNhETEBQQFRE3Eja+PxISEBQRFBA4ETcTERM1ExIQFBA4ExETEhETEDgTNQABAQANBQAA"
#"temp_32": "JgBmAL8/EhITERMSEjYSNhISEzUTNRMREzUTEhISExETNRM1vkASEhISExISNhI2EhISNhI2ExETNRMSEhITERM1FDS/PxMREhITERM1EzYSEhM1EjYTERM1ExISEhMREzUTNQABAgANBQAA"

sensor:
  - platform: template
    sensors:
      ac_state:
        friendly_name: AC State
        value_template: "{{ states(states('input_text.ac_entity_id')) + '_' + states('group.dampers') }}"

  - platform: template
    sensors:
      ac_damper_living_room_state:
        friendly_name: AC Damper Living Room State
        value_template: "{{ states(states('input_text.ac_entity_id')) + '_' + states('climate.ac_damper_living_room') }}"

  - platform: template
    sensors:
      ac_damper_office_state:
        friendly_name: AC Damper Office State
        value_template: "{{ states(states('input_text.ac_entity_id')) + '_' + states('climate.ac_damper_office') }}"

  - platform: template
    sensors:
      ac_damper_guests_state:
        friendly_name: AC Damper Guests State
        value_template: "{{ states(states('input_text.ac_entity_id')) + '_' + states('climate.ac_damper_guests') }}"

  - platform: template
    sensors:
      ac_damper_riley_state:
        friendly_name: AC Damper Riley State
        value_template: "{{ states(states('input_text.ac_entity_id')) + '_' + states('climate.ac_damper_riley') }}"

  - platform: template
    sensors:
      ac_damper_bedroom_state:
        friendly_name: AC Damper Bedroom State
        value_template: "{{ states(states('input_text.ac_entity_id')) + '_' + states('climate.ac_damper_bedroom') }}"



climate:
  - platform: smartir
    name: Living Room AC
    unique_id: ac_damper_living_room
    device_code: 1344
    controller_data: remote.living_room
    temperature_sensor: sensor.living_room_climate_temperature
    humidity_sensor: sensor.living_room_climate_humidity

  - platform: smartir
    name: Office AC
    unique_id: ac_damper_office
    device_code: 1344
    controller_data: remote.office
    temperature_sensor: sensor.office_climate_temperature
    humidity_sensor: sensor.office_climate_humidity

  - platform: smartir
    name: Guests AC
    unique_id: ac_damper_guests
    device_code: 1344
    controller_data: remote.guests
    temperature_sensor: sensor.guests_climate_temperature
    humidity_sensor: sensor.guests_climate_humidity

  - platform: smartir
    name: Riley AC
    unique_id: ac_damper_riley
    device_code: 1344
    controller_data: remote.riley
    temperature_sensor: sensor.riley_climate_temperature
    humidity_sensor: sensor.riley_climate_humidity

  - platform: smartir
    name: Bedroom AC
    unique_id: ac_damper_bedroom
    device_code: 1344
    controller_data: remote.bedroom
    temperature_sensor: sensor.bedroom_climate_temperature
    humidity_sensor: sensor.bedroom_climate_humidity

input_text:
  last_ac_mode:
    name: Last AC Mode

input_number:
  ac_damper_quick_to_medium:
    name: Quick to Medium (mins)
    min: 1
    max: 60
    step: 1
  ac_damper_quick_to_low:
    name: Medium to Low (mins)
    min: 1
    max: 60
    step: 1

script:
  toggle_dampers:
    alias: Toggle Dampers
    mode: queued
    sequence:
      - variables:
          damper: "{{ 'group.dampers' if damper == '' else damper }}"
      - service: "homeassistant.turn_{{ 'on' if is_state(damper, 'off') else 'off' }}"
        data:
          entity_id: "{{ damper }}"

input_boolean:
  ac_damper_living_room_need_update:
  ac_damper_office_need_update:
  ac_damper_guests_need_update:
  ac_damper_riley_need_update:
  ac_damper_bedroom_need_update:

group:
  dampers:
    entities:
      - climate.ac_damper_living_room
      - climate.ac_damper_office
      - climate.ac_damper_guests
      - climate.ac_damper_riley
      - climate.ac_damper_bedroom

automation:
  - alias: When all dampers are off set ac to heat/cool so it shuts off
    trigger:
      platform: state
      entity_id: group.dampers
      to: "off"
      for:
        seconds: 10
    action:
      - service: switch.turn_on
        entity_id: switch.ac_smartauto
      - delay: "00:00:05"
      - service: climate.set_fan_mode
        data:
          fan_mode: auto
        target:
          entity_id: climate.mainac

  #Turn on Living Room Damper when Main AC set to Fan Only (and no other dampers are on)
  - alias: Turn on LR AC when Main AC set to Fan
    trigger:
      - platform: state
        entity_id:
          - climate.mainac
          - climate.manual_ac

        from:
          - heat
          - cool
        to:
          - fan_only

    condition:
      - condition: state
        entity_id: group.dampers
        state: "off"

    action:
      - service: climate.turn_on
        entity_id: climate.ac_damper_living_room

  - alias: Save last ac mode
    trigger:
      - platform: state
        entity_id:
          - climate.mainac
          - climate.manual_ac
        from: #This helps the automation not run when attributes change (such as temperature)
          - heat
          - cool
        to: #Make sure we only capture those two states, and not other states
          - heat
          - cool
    action:
      - service: input_text.set_value
        entity_id: input_text.last_ac_mode
        data:
          value: "{{ trigger.to_state.state }}"

  # - alias: AC Damper Quick
  #   mode: parallel
  #   trigger:
  #     - platform: state
  #       entity_id:
  #         - fan.ac_damper_living_room
  #         - fan.ac_damper_office
  #         - fan.ac_damper_guests
  #         - fan.ac_damper_riley
  #         - fan.ac_damper_bedroom
  #       attribute: "speed"
  #       to: "Quick"
  #       for:
  #         minutes: "{{ states('input_number.ac_damper_quick_to_medium')|int }}"
  #   variables:
  #     room: "{{ trigger.to_state.entity_id | replace('fan.ac_damper_', '') }}"
  #   action:
  #     - service: python_script.ac_damper
  #       data:
  #         room: "{{ room }}"
  #         speed: "Medium"
  #         action: send_command
  #     #Wait for a few more minutes
  #     - delay: "{{ states('input_number.ac_damper_quick_to_low') | multiply(60) | int }}"
  #     #If the damper is still set to quick, continue
  #     - condition: template
  #       value_template: "{{ state_attr(trigger.to_state.entity_id, 'speed') == 'Quick' }}"
  #     - service: fan.set_speed
  #       data:
  #         entity_id: "fan.ac_damper_{{room}}"
  #         speed: "Low"

  #Notify when windows are open
  # - alias: AC on with open window - Living Room
  #   trigger:
  #     - platform: state
  #       entity_id: climate.ac_damper_living_room
  #       from: "off"
  #       to: "fan_only"
  #       for:
  #         seconds: 60
  #     - platform: state
  #       entity_id:
  #         - climate.mainac
  #         - climate.manual_ac
  #       from: "fan_only"
  #       to: "cool"
  #     - platform: state
  #       entity_id:
  #         - climate.mainac
  #         - climate.manual_ac
  #       from: "fan_only"
  #       to: "heat"
  #   condition:
  #     condition: and
  #     conditions:
  #       #When AC is on heat or cool or unknown (when disconnected from server) (updated to support manual_ac)
  #       - condition: template
  #         value_template: "{% set ac_entity_id = states('input_text.ac_entity_id') %}{{ is_state(ac_entity_id, 'heat') or is_state(ac_entity_id, 'cool') or is_state(ac_entity_id, 'unknown') or is_state(ac_entity_id, 'unavailable') }}"

  #       - condition: or
  #         conditions: #When balcony or bathroom open
  #           - condition: state
  #             entity_id: binary_sensor.balcony_window
  #             state: "on"
  #           - condition: state
  #             entity_id: binary_sensor.bathroom_door
  #             state: "on"

  #       - condition: state
  #         entity_id: input_boolean.ac_damper_living_room
  #         state: "on"
  #   action:
  #     - service: script.notify_all
  #       data:
  #         message: >
  #           {% set balcony_window = is_state("binary_sensor.balcony_window", "on") -%}
  #           {% set bathroom_door = is_state("binary_sensor.bathroom_door", "on") -%}
  #           {% set both = (balcony_window and bathroom_door) %}
  #           Living Room AC is on. Please close the {{ 'balcony window' if balcony_window }}{{ ' and the ' if both }}{{ 'bathroom door' if bathroom_door }}.

  - id: Update room temperature for dampers
    alias: Update room temperature for dampers
    mode: parallel
    trigger:
      #Damper state has changed 15 seconds ago
      - platform: state
        entity_id:
          - climate.ac_damper_living_room
          - climate.ac_damper_office
          - climate.ac_damper_guests
          - climate.ac_damper_riley
          - climate.ac_damper_bedroom
        for:
          seconds: 15

      # It's been 4 minutes since last update
      - platform: state
        entity_id:
          - input_boolean.ac_damper_living_room_need_update
          - input_boolean.ac_damper_office_need_update
          - input_boolean.ac_damper_guests_need_update
          - input_boolean.ac_damper_riley_need_update
          - input_boolean.ac_damper_bedroom_need_update
        to: "off"
        for:
          minutes: 4

      # #Temperature sensor changed
      # - platform: state
      #   entity_id:
      #     - sensor.living_room_temperature
      #     - sensor.office_temperature
      #     - sensor.guests_temperature
      #     - sensor.riley_temperature
      #     - sensor.bedroom_temperature

    condition:
      #Is damper on
      - condition: template
        value_template: >
          {% set room = 
          (trigger.to_state.entity_id
          | replace('input_boolean.', '')
          | replace('climate.', '')
          | replace('input_select.', '')
          | replace('sensor.', '')
          | replace('ac_damper_', '')
          | replace('_need_update', '')
          | replace('_climate_temperature', '')) %}{{ is_state('climate.ac_damper_' + room, 'fan_only') }}

    action:
      - service: python_script.update_ac_room_temp
        data:
          room: "{{ trigger.to_state.entity_id }}"

  - id: Repeat damper transmission - living room
    mode: restart
    alias: Repeat damper transmission - living room
    trigger:
      - platform: state
        entity_id:
          - climate.ac_damper_living_room
        from:
          - "off"
          - "fan_only"
        to:
          - "off"
          - "fan_only"

      - platform: state
        entity_id:
          - climate.ac_damper_living_room
        attribute: temperature

      - platform: state
        entity_id:
          - climate.ac_damper_living_room
        attribute: fan_mode

    action:
      - alias: "Wait 3 seconds before starting"
        delay:
          seconds: 3
  
      - alias: "Repeat transmission 3 times with 3 seconds delay"
        repeat:
          count: "{{ 3 }}"
          sequence:
            - service: "climate.turn_{{ trigger.to_state.state | replace('fan_only', 'on') }}"
              data:
                entity_id: "{{ trigger.to_state.entity_id }}"
            - delay:
                seconds: 3

  - id: Repeat damper transmission - office
    mode: restart
    alias: Repeat damper transmission - office
    trigger:
      - platform: state
        entity_id:
          - climate.ac_damper_office
        from:
          - "off"
          - "fan_only"
        to:
          - "off"
          - "fan_only"

      - platform: state
        entity_id:
          - climate.ac_damper_office
        attribute: temperature

      - platform: state
        entity_id:
          - climate.ac_damper_office
        attribute: fan_mode


    action:
      - alias: "Wait 3 seconds before starting"
        delay:
          seconds: 3

      - alias: "Repeat transmission 3 times with 3 seconds delay"
        repeat:
          count: "{{ 3 }}"
          sequence:
            - service: "climate.turn_{{ trigger.to_state.state | replace('fan_only', 'on') }}"
              data:
                entity_id: "{{ trigger.to_state.entity_id }}"
            - delay:
                seconds: 3

  - id: Repeat damper transmission - guests
    mode: restart
    alias: Repeat damper transmission - guests
    trigger:
      - platform: state
        entity_id:
          - climate.ac_damper_guests
        from:
          - "off"
          - "fan_only"
        to:
          - "off"
          - "fan_only"

      - platform: state
        entity_id:
          - climate.ac_damper_guests
        attribute: temperature

      - platform: state
        entity_id:
          - climate.ac_damper_guests
        attribute: fan_mode

    action:
      - alias: "Wait 3 seconds before starting"
        delay:
          seconds: 3

      - alias: "Repeat transmission 3 times with 3 seconds delay"
        repeat:
          count: "{{ 3 }}"
          sequence:
            - service: "climate.turn_{{ trigger.to_state.state | replace('fan_only', 'on') }}"
              data:
                entity_id: "{{ trigger.to_state.entity_id }}"
            - delay:
                seconds: 3

  - id: Repeat damper transmission - riley
    mode: restart
    alias: Repeat damper transmission - riley
    trigger:
      - platform: state
        entity_id:
          - climate.ac_damper_riley
        from:
          - "off"
          - "fan_only"
        to:
          - "off"
          - "fan_only"

      - platform: state
        entity_id:
          - climate.ac_damper_riley
        attribute: temperature

      - platform: state
        entity_id:
          - climate.ac_damper_riley
        attribute: fan_mode

    action:
      - alias: "Wait 3 seconds before starting"
        delay:
          seconds: 3

      - alias: "Repeat transmission 3 times with 3 seconds delay"
        repeat:
          count: "{{ 3 }}"
          sequence:
            - service: "climate.turn_{{ trigger.to_state.state | replace('fan_only', 'on') }}"
              data:
                entity_id: "{{ trigger.to_state.entity_id }}"
            - delay:
                seconds: 3

  - id: Repeat damper transmission - bedroom
    mode: restart
    alias: Repeat damper transmission - bedroom
    trigger:
      - platform: state
        entity_id:
          - climate.ac_damper_bedroom
        from:
          - "off"
          - "fan_only"
        to:
          - "off"
          - "fan_only"

      - platform: state
        entity_id:
          - climate.ac_damper_bedroom
        attribute: temperature

      - platform: state
        entity_id:
          - climate.ac_damper_bedroom
        attribute: fan_mode

    action:
      - alias: "Wait 3 seconds before starting"
        delay:
          seconds: 3

      - alias: "Repeat transmission 3 times with 3 seconds delay"
        repeat:
          count: "{{ 3 }}"
          sequence:
            - service: "climate.turn_{{ trigger.to_state.state | replace('fan_only', 'on') }}"
              data:
                entity_id: "{{ trigger.to_state.entity_id }}"
            - delay:
                seconds: 3


  - id: Set correct dampers temperature when switching ac mode
    alias: Set dampers temperature when switching ac mode
    trigger:
      - platform: state
        entity_id: climate.mainac
        from: 
          - heat
          - cool
        to: 
          - heat
          - cool
        for:
          seconds: 5

    action:
      # Set Living Room temp to be 1 degree lower/higher than rooms
      - service: climate.set_temperature
        data:
          temperature: "{{ '28' if trigger.to_state.state == 'heat' else '23' }}"
        target:
          entity_id: 
            - climate.mainac
            - climate.ac_damper_living_room

      #Set rooms temp
      - service: climate.set_temperature
        data:
          temperature: "{{ '27' if trigger.to_state.state == 'heat' else '24' }}"
        target:
          entity_id:
            - climate.ac_damper_office
            - climate.ac_damper_guests
            - climate.ac_damper_riley
            - climate.ac_damper_bedroom

      # Set dampers to auto fan speed
      - service: climate.set_fan_mode
        data:
          fan_mode: Auto
        target:
          entity_id:
            - climate.ac_damper_living_room
            - climate.ac_damper_office
            - climate.ac_damper_guests
            - climate.ac_damper_riley
            - climate.ac_damper_bedroom

      - delay:
          seconds: 5

      # Set main ac to auto fan speed
      - service: climate.set_fan_mode
        data:
          fan_mode: auto
        target:
          entity_id: climate.mainac

############################################
######### Open door notifications  #########
############################################

#Living room
#Bathroom door is open
#Balcony window is open
#Kitchen window is open
#Room doors open while their ac is off

  - id: AC Dampers Notification Living Room
    alias: AC Dampers Notification Living Room
    mode: restart
    trigger:

      # Living Room AC turned on
      # - id: ac
      #   platform: state
      #   entity_id: climate.ac_damper_living_room
      #   from: "off"
      #   to: "fan_only"
      #   for:
      #     minutes: 5

      # Windows were opened
      - id: windows
        platform: state
        entity_id: 
          - binary_sensor.balcony_window
          - binary_sensor.kitchen_window
        from: "off"
        to: "on"
        for:
          minutes: 5
        
      # Doors were opened
      - id: doors
        platform: state
        entity_id: 
          - binary_sensor.office_door
          - binary_sensor.guests_door
          - binary_sensor.bathroom_door
          - binary_sensor.riley_door
          - binary_sensor.bedroom_door
        from: "off"
        to: "on"
        for:
          minutes: 5

    variables:
      balcony_window_open: "{{ 'חלון המרפסת' if is_state('binary_sensor.balcony_window', 'on') else '' }}"
      kitchen_window_open: "{{ 'חלון המטבח' if is_state('binary_sensor.kitchen_window', 'on') else '' }}"

      office_door_open: "{{ 'דלת חדר העבודה' if (is_state('binary_sensor.office_door', 'on') and is_state('climate.ac_damper_office', 'off')) else '' }}"
      guests_door_open: "{{ 'דלת חדר האורחים' if is_state('binary_sensor.guests_door', 'on') and is_state('climate.ac_damper_guests', 'off') else '' }}"
      bathroom_door_open: "{{ 'דלת המקלחת' if is_state('binary_sensor.bathroom_door', 'on') else '' }}"
      riley_door_open: "{{ 'דלת חדר ריילי' if is_state('binary_sensor.riley_door', 'on') and is_state('climate.ac_damper_riley', 'off') else '' }}"
      bedroom_door_open: "{{ 'דלת חדר ההורים' if is_state('binary_sensor.bedroom_door', 'on') and is_state('climate.ac_damper_bedroom', 'off') else '' }}"

      full_list: "{{ [balcony_window_open, kitchen_window_open, office_door_open, guests_door_open, bathroom_door_open, riley_door_open, bedroom_door_open] | select('ne', '') | join (', ') }}"

    condition:
      - and:
        - alias: "Living Room AC is on"
          condition: state
          entity_id: climate.ac_damper_living_room
          state: fan_only

        - alias: "Windows or doors are open"
          condition: template
          value_template: "{{ balcony_window_open != '' or kitchen_window_open != '' or office_door_open != '' or guests_door_open != '' or bathroom_door_open != '' or riley_door_open != '' or bedroom_door_open != '' }}"

    action:
      - service: "tts.cloud_say"
        data:
          entity_id: media_player.announcements
          message: "היי, המזגן דולק. נא לסגור את {{ full_list }}. זה בית משפחת גרין, אז בואו נהייה ירוקים לסביבה."
          language: "he-IL"


      # - wait_template: "{{ balcony_window_open == '' and kitchen_window_open == '' and office_door_open == '' and guests_door_open == '' and bathroom_door_open == '' and riley_door_open == '' and bedroom_door_open == '' }}"
      #   timeout:
      #     seconds: 30
      #   continue_on_timeout: true

      # - if: 
      #     #Everything was closed in time
      #     - condition: template
      #       value_template: "{{ wait.remaining > 0 }}" #If there was time remaining in the timeout
      #   then: 
      #     #Congratulate
      #     - service: "tts.cloud_say"
      #       data:
      #         entity_id: media_player.announcements
      #         message: "כל הכבוד לכם. עכשיו אתם גרינים של כבוד."
      #         language: "he-IL"
      #   else:
      #     #Remind
      #     - service: "tts.cloud_say"
      #       data:
      #         entity_id: media_player.announcements
      #         message: "היי, המזגן דולק. נא לסגור את {{ full_message }}. זה בית משפחת גרין, אז בואו נהייה ירוקים לסביבה."
      #         language: "he-IL"

     

#Rooms
#Door is open while ac is on and it's not 


switch:
  - platform: template
    switches:
      ac_damper_living_room:
        value_template: "{{ is_state('climate.ac_damper_living_room', 'fan_only') }}"
        turn_on:
          service: climate.turn_on
          target:
            entity_id: climate.ac_damper_living_room
        turn_off:
          service: climate.turn_off
          target:
            entity_id: climate.ac_damper_living_room
        icon_template: >-
          {% if is_state('climate.mainac', 'heat') %}
            mdi:heat-wave
          {% elif is_state('climate.mainac', 'cool') %}
            mdi:snowflake
          {% elif is_state('climate.mainac', 'fan_only') %}
            mdi:fan
          {% elif is_state('climate.mainac', 'auto') %}
            mdi:thermometer-auto
          {% elif is_state('climate.mainac', 'dry') %}
            mdi:water-percent
          {% else %}
            mdi:power-plug-off-outline
          {% endif %}

      ac_damper_office:
        value_template: "{{ is_state('climate.ac_damper_office', 'fan_only') }}"
        turn_on:
          service: climate.turn_on
          target:
            entity_id: climate.ac_damper_office
        turn_off:
          service: climate.turn_off
          target:
            entity_id: climate.ac_damper_office
        icon_template: >-
          {% if is_state('climate.mainac', 'heat') %}
            mdi:heat-wave
          {% elif is_state('climate.mainac', 'cool') %}
            mdi:snowflake
          {% elif is_state('climate.mainac', 'fan_only') %}
            mdi:fan
          {% elif is_state('climate.mainac', 'auto') %}
            mdi:thermometer-auto
          {% elif is_state('climate.mainac', 'dry') %}
            mdi:water-percent
          {% else %}
            mdi:power-plug-off-outline
          {% endif %}

      ac_damper_guests:
        value_template: "{{ is_state('climate.ac_damper_guests', 'fan_only') }}"
        turn_on:
          service: climate.turn_on
          target:
            entity_id: climate.ac_damper_guests
        turn_off:
          service: climate.turn_off
          target:
            entity_id: climate.ac_damper_guests
        icon_template: >-
          {% if is_state('climate.mainac', 'heat') %}
            mdi:heat-wave
          {% elif is_state('climate.mainac', 'cool') %}
            mdi:snowflake
          {% elif is_state('climate.mainac', 'fan_only') %}
            mdi:fan
          {% elif is_state('climate.mainac', 'auto') %}
            mdi:thermometer-auto
          {% elif is_state('climate.mainac', 'dry') %}
            mdi:water-percent
          {% else %}
            mdi:power-plug-off-outline
          {% endif %}


      ac_damper_riley:
        value_template: "{{ is_state('climate.ac_damper_riley', 'fan_only') }}"
        turn_on:
          service: climate.turn_on
          target:
            entity_id: climate.ac_damper_riley
        turn_off:
          service: climate.turn_off
          target:
            entity_id: climate.ac_damper_living_room
        icon_template: >-
          {% if is_state('climate.mainac', 'heat') %}
            mdi:heat-wave
          {% elif is_state('climate.mainac', 'cool') %}
            mdi:snowflake
          {% elif is_state('climate.mainac', 'fan_only') %}
            mdi:fan
          {% elif is_state('climate.mainac', 'auto') %}
            mdi:thermometer-auto
          {% elif is_state('climate.mainac', 'dry') %}
            mdi:water-percent
          {% else %}
            mdi:power-plug-off-outline
          {% endif %}

      ac_damper_bedroom:
        value_template: "{{ is_state('climate.ac_damper_bedroom', 'fan_only') }}"
        turn_on:
          service: climate.turn_on
          target:
            entity_id: climate.ac_damper_bedroom
        turn_off:
          service: climate.turn_off
          target:
            entity_id: climate.ac_damper_bedroom
        icon_template: >-
          {% if is_state('climate.mainac', 'heat') %}
            mdi:heat-wave
          {% elif is_state('climate.mainac', 'cool') %}
            mdi:snowflake
          {% elif is_state('climate.mainac', 'fan_only') %}
            mdi:fan
          {% elif is_state('climate.mainac', 'auto') %}
            mdi:thermometer-auto
          {% elif is_state('climate.mainac', 'dry') %}
            mdi:water-percent
          {% else %}
            mdi:power-plug-off-outline
          {% endif %}
