group:
  windows:
    name: Windows
    entities:
      - binary_sensor.balcony_window
      - binary_sensor.kitchen_window
      - binary_sensor.office_window
      - binary_sensor.birds_window
      - binary_sensor.bedroom_window

  shutters:
    name: Shutters
    entities:
      - cover.living_room_shutter
      - cover.kitchen_shutter
      - cover.office_shutter
      - cover.birds_shutter
      - cover.bedroom_shutter

script:
  all_shutters:
    alias: "All Shutters"
    sequence:
      - service: "{{ service }}"
        entity_id: cover.kitchen_shutter
      - delay: "00:00:01"
      - service: "{{ service }}"
        entity_id: cover.office_shutter
      - delay: "00:00:01"
      - service: "{{ service }}"
        entity_id: cover.birds_shutter
      - delay: "00:00:01"
      - service: "{{ service }}"
        entity_id: cover.bedroom_shutter
      - delay: "00:00:{{ living_room_shutter_delay if living_room_shutter_delay else '01' }}" #Custom delay for living_room_shutter
      - service: "{{ service }}"
        entity_id: cover.living_room_shutter

# automation:
#   - alias: Shutter Update Position From Physical Switch
#     mode: parallel
#     trigger:
#       - platform: state
#         entity_id: 
#           - sensor.living_room_shutter_state
#           - sensor.kitchen_shutter_state
#           - sensor.kitchen_curtain_state
#           - sensor.office_shutter_state
#           - sensor.birds_shutter_state
#           - sensor.bedroom_shutter_state
#     variables:
#       cover_entity_id: "cover.{{ trigger.to_state.entity_id | replace('sensor.', '') | replace('_state', '') }}"
#     condition:
#       - condition: template
#         value_template: "{{ states(cover_entity_id) != 'opening' and states(cover_entity_id) != 'closing' }}"
#     action:
#       service: cover_rf_time_based.set_known_action
#       data:
#         entity_id: '{{ cover_entity_id }}'
#         action: '{{ trigger.to_state.state }}'