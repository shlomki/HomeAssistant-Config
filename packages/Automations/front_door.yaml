input_text:
  gallery_display_day:

automation:

  - alias: Door is opened when not home
    trigger:
      - platform: state
        entity_id: binary_sensor.front_door
        from: "off"
        to: "on"
    condition:
      - condition: state
        entity_id: group.bffs
        state: not_home
    action:
      - service: notify.bffs
        data:
          message: The front door has been opened and no one's home!

  - alias: Door is opened with photo actions
    variables:
      today_name: >
        {% set sensor_names = [ 'Monday', 'Tuesday', 'Wednesday','Thursday','Friday','Saturday','Sunday'] %}
        {{ sensor_names[now().weekday()] }}
      front_door_photo: "camera_snaps/{{today_name}}/{{ now().strftime('%H.%M.%S') }}_front_door.jpg"
      living_room_photo: "camera_snaps/{{today_name}}/{{ now().strftime('%H.%M.%S') }}_living_room.jpg"
    trigger:
      - platform: state
        entity_id: binary_sensor.front_door
        from: "off"
        to: "on"
    action:
      - service: camera.snapshot
        data:
          entity_id: camera.front_door
          filename: "{{ front_door_photo }}"
      - service: camera.snapshot
        data:
          entity_id: camera.living_room
          filename: "{{ living_room_photo }}"
      - service: script.notify_shlomi_when_away_with_photo_actions
        data:
          message: The front door has been opened
          front_door_photo: "{{ front_door_photo }}"
          living_room_photo: "{{ living_room_photo }}"
      - service: script.notify_inbal_when_away_with_photo_actions
        data:
          message: The front door has been opened
          front_door_photo: "{{ front_door_photo }}"
          living_room_photo: "{{ living_room_photo }}"

  - alias: Doorbell ring
    trigger:
      - platform: state
        entity_id: binary_sensor.doorbell
        from: "off"
        to: "on"
    action:
      - service: script.blink_light
        data:
          light_entity_id: light.living_room_curtain_light
      - service: notify.bffs
        data:
          message: "Ding dong! Someone is at the door!"
      - delay:
          seconds: 10

  - alias: Doorbell ring with photo
    variables:
      filename: /config/www/camera_snaps/front_door.jpg
    trigger:
      - platform: state
        entity_id: binary_sensor.doorbell
        from: "off"
        to: "on"
    action:
      - service: camera.snapshot
        data:
          entity_id: camera.front_door
          filename: "{{ filename }}"
      - service: script.notify_bffs_photo
        data:
          file: "{{ filename }}"
      - delay:
          seconds: 10

  - alias: Doorbell display video on house tablet
    trigger:
      - platform: state
        entity_id: binary_sensor.doorbell
        from: 'off'
        to: 'on'
    condition:
      - alias: "Tablet is Home"
        condition: state
        entity_id: device_tracker.tablet_white
        state: "home"
    action:
      - variables:
          fully_kiosk_was_in_foreground: "{{ is_state('sensor.house_tablet_foreground_app', 'de.ozerov.fully') }}" #Was Fully Kiosk in the foreground?
          tablet_was_off: "{{ is_state('switch.house_tablet_screen', 'off') }}" #Was the tablet screen off?

      - service: fully_kiosk.load_url
        data:
          url: !secret front_door_camera_url
        target:
          device_id: !secret house_tablet_device_id

      - service: button.press
        target:
          entity_id: button.house_tablet_bring_to_foreground

      #Wait for the door to open for 1 minute
      - wait_template: "{{ is_state('binary_sensor.front_door', 'on') }}"
        timeout:
          minutes: 1
        continue_on_timeout: true

      - if:
        - alias: "The tablet was off"
          condition: template
          value_template: "{{ tablet_was_off }}"
        then:
          - service: switch.turn_off
            target:
              entity_id: switch.house_tablet_screen

      - if:
        - alias: "A different app was in the foreground"
          condition: template
          value_template: "{{ fully_kiosk_was_in_foreground == false}}"
        then:
          - service: button.press
            target:
              entity_id: button.house_tablet_send_to_background

      - service: button.press
        target:
          entity_id: button.house_tablet_load_start_url

  - alias: Front door Left Open
    mode: single
    trigger:
      - platform: state
        entity_id: binary_sensor.front_door
        from: "off"
        to: "on"
        for:
          minutes: 3
    action:
      - service: script.notify_all
        data:
          message: Hey, I think the front door was left open
      - wait_for_trigger:
          - platform: state
            entity_id: binary_sensor.front_door
            from: "on"
            to: "off"
      - service: script.notify_all
        data:
          message: The front door was closed

  - alias: Front door Left Open Reminder
    mode: single
    trigger:
      - platform: state
        entity_id: binary_sensor.front_door
        from: "off"
        to: "on"
        for:
          minutes: 10
    action:
      - service: script.notify_all
        data:
          message: The front door is still open (10 minute reminder).

  - alias: Delete old front door snapshots
    trigger:
      platform: time
      at: "00:00:10"
    action:
      - service: shell_command.removesnapshots
        data:
          day: >
            {% set sensor_names = [ 'Monday', 'Tuesday', 'Wednesday','Thursday','Friday','Saturday','Sunday'] %}
            {{ sensor_names[now().weekday()] }}

  - alias: Set gallery day
    trigger:
      platform: time
      at: "00:00:00"
    action:
      - service: input_text.set_value
        data:
          entity_id: input_text.gallery_display_day
          value: >
            {% set sensor_names = [ 'Monday', 'Tuesday', 'Wednesday','Thursday','Friday','Saturday','Sunday'] %}
            {{ sensor_names[now().weekday()] }}

  - alias: Front door lock battery is critical
    trigger:
      - platform: numeric_state
        entity_id: sensor.front_door_lock_battery_level
        below: 35
        for:
          seconds: 30
    action:
      - service: notify.shlomi
        data:
          message: "Front Door Lock is low on battery! Charge it soon! ({{ trigger.to_state.state }}%)"

shell_command:
  removesnapshots: 'find camera_snaps/{{ day }}/ -exec rm {} \;'

script:
  front_door_lock_toggle:
    alias: "Front Door Lock Toggle"
    sequence:
      - alias: "If door is open, do nothing"
        condition: state
        entity_id: binary_sensor.front_door
        state: "off"

      - service: "{{ iif(is_state('lock.front_door', 'unlocked'), 'lock.lock', 'lock.unlock') }}"
        entity_id: lock.front_door

  blink_living_room_bff_light:
    alias: Blink Living Room BFF Light
    sequence:
      - repeat:
          count: 10
          sequence:
            - service: light.toggle
              entity_id: light.living_room_bff_light
            - delay:
                seconds: 0.5

  housekeeper_unlock_and_lock_door:
    alias: Housekeeper - Unlock and Lock Door
    sequence:
      #Unlock the door to let the housekeeper in
      - service: lock.unlock
        target:
          entity_id: lock.front_door
      - service: notify.bffs
        data:
          message: "ðŸ§¹ðŸ”“ The front door was unlocked to let the housekeeper in"

      #Wait 2 hours for the housekeeper to open the door
      - wait_for_trigger:
          - platform: state
            entity_id: binary_sensor.front_door
            from: "off"
            to: "on"
        timeout:
          hours: "2"
        continue_on_timeout: true

      - if:
          #If housekeeper had arrived (the front door opened during this time)
          - condition: template
            value_template: "{{ wait.remaining > 0 }}" #If there was time remaining in the timeout
        then:
          - service: notify.bffs

            data:
              message: "ðŸ§¹ðŸ‘© The housekeeper has arrived. I'll lock the door in about 2 hours."

          #Wait for 2h 10m hours starting now
          - delay:
              minutes: "130"

          #Lock the front door (assuming the housekeeper has finished)
          - service: lock.lock
            target:
              entity_id: lock.front_door

          - service: notify.bffs
            data:
              message: "ðŸ§¹âœ¨ðŸ”’ 2 hours have passed and the house is clean, I've locked the front door."

        else:
          #If housekeeper hadn't arrived, lock the front door now
          - service: lock.lock
            target:
              entity_id: lock.front_door

          - service: notify.bffs
            data:
              message: "ðŸ§¹ðŸ’©ðŸ”’ The housekeeper hasn't arrived. I've locked the front door now."

group:
  front_door_left_open_automations:
    entities:
      - automation.front_door_left_open
      - automation.front_door_left_open_reminder

template:
  - sensor:
      - name: "Front Door Combined"
        state: "{{ states('binary_sensor.front_door') | replace('off', 'Closed') | replace('on', 'Open') | capitalize }}, {{ states('lock.front_door') | replace('off', 'Locked') | replace('on', 'Unlocked') | capitalize }}"

switch:
  - platform: template
    switches:
      housekeeper_unlock_and_lock_door:
        value_template: "{{ is_state('script.housekeeper_unlock_and_lock_door', 'on') }}"
        turn_on:
          service: script.turn_on
          target:
            entity_id: script.housekeeper_unlock_and_lock_door
        turn_off:
          service: script.turn_off
          target:
            entity_id: script.housekeeper_unlock_and_lock_door

# rest_command:
#   front_door_play_doorbell:
#     url: "http://localhost:1984/api/streams?dst=camera.office&src=ffmpeg:https://ha.shlomi.green/local/doorbell_pressed.mp3#audio=pcma#input=file"
#     method: POST

# media_player:
#   - platform: webrtc
#     name: Office Camera
#     stream: camera.office
#     audio: h264