#############################################################################################
############# DON'T FORGET TO CHANGE THE NOTIFICATION SERVICE ON LINES 45 & 70! #############
#############################################################################################


# {% set entities_string = expand('group.away_from_home_monitored_entities') | rejectattr('state', 'in', ['off', 'unavailable', 'unknown']) | map(attribute='entity_id') | join(',') %}
# {% set entities = entities_string.split(',') %}
# {% for entity in entities %}
# - {{ state_attr(entity, 'friendly_name')}} {{ states(entity) | upper }}{% endfor %}


automation:
  #######################################################
  ### Alert about entities becoming unavailable or online
  #######################################################

  - id: Away from Home - Notify
    alias: Away from Home - Notify
    mode: restart
    variables:
      front_door_is_unlocked: "{{ is_state('lock.front_door', 'unlocked') }}"
      other_entities_are_on: "{{ is_state('group.away_from_home_monitored_entities', 'on') }}"
      list_of_entities_on: "{{ '- ' + expand('group.away_from_home_monitored_entities') | selectattr('state', 'in', ['on', 'fan_only']) | join(' ON\n- ', attribute='attributes.friendly_name') + ' ON\n' or '' }}"
      both_on: "{{front_door_is_unlocked and other_entities_are_on }}"

      guests_list: "{{ states('sensor.guest_names') }}"
      multiple_guests: "{{ guests_list | contains(',') }}"

    trigger:
      - platform: state
        id: bffs
        entity_id: group.bffs
        from: home
        to: not_home

    condition:
      - alias: "If any entities were left on or unlocked"
        condition: state
        entity_id:
          - group.away_from_home_monitored_entities
          - lock.front_door
        match: any
        state:
          - "on"
          - "unlocked"

    action:
      #First, send a notification that things were left on
      - if:
          - alias: "If Guest Mode is off"
            condition: state
            entity_id: input_boolean.guest_mode
            state: "off"
        then:
          - service: notify.bffs #Notifies us via telegram. Change this to your preferred service (such as: persistent_notification.create).
            data:
              message: "Hey, you've left home with:{{'\n'}}{{ '- Front Door UNLOCKED\n' if front_door_is_unlocked}}{{ list_of_entities_on if other_entities_are_on}}{{'\n\n'}}I'll {{ 'lock ' if front_door_is_unlocked }}{{'and ' if both_on}}{{'turn them off ' if other_entities_are_on}}in 5 minutes unless you turn Guest Mode on."
        else:
          - service: notify.bffs #Notifies us via telegram. Change this to your preferred service (such as: persistent_notification.create).
            data:
              message: "Hey, Guest Mode is on{{ ' (' + guests_list + ( ' are ' if multiple_guests else ' is ' ) + 'still at home)' if guests_list != 'No known guests' }}. The house will stay with:{{'\n'}}{{ '- Front Door UNLOCKED\n' if front_door_is_unlocked}}{{ list_of_entities_on if other_entities_are_on }}{{'\n\n'}}unless you turn Guest Mode off in the next 5 minutes."

      #Wait 5 more minutes for people to change their mind
      - alias: "Wait to see if Guest Mode gets turned on"
        wait_for_trigger:
          - platform: state
            entity_id: input_boolean.guest_mode
            from: "off"
            to: "on"
        timeout:
          minutes: 5
        continue_on_timeout: true

      - if:
          - condition: template
            value_template: "{{ wait.remaining > 0 }}" #If there was time remaining in the timeout - Guest Mode was turned on manually
        then:
          - service: notify.bffs #Notifies via telegram. Change this to your preferred service (such as: persistent_notification.create).
            data:
              message: "Guest Mode was turned on."

        else:

          - if: #If Guest mode wasn't turned on in time
              - alias: "If Guest Mode is still off"
                condition: state
                entity_id: input_boolean.guest_mode
                state: "off"
            then: #Then turn things off and lock the door
              - service: homeassistant.turn_off
                entity_id: group.away_from_home_monitored_entities

              - service: lock.lock
                entity_id: lock.front_door

              - service: notify.bffs #Notifies via telegram. Change this to your preferred service (such as: persistent_notification.create).
                data:
                  message: "Done."


  #######################################################
  ### Group of monitored entities.
  ### Add any entities you want to be notified about.
  #######################################################

group:
  bffs:
    entities:
      - person.shlomi
      - person.inbal

  away_from_home_monitored_entities:
    entities:
      - group.all_lights
      - group.dampers
      - group.tvs
      - group.all_fans
